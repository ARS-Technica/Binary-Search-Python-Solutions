"""
558. Flip to Zeros
Easy
https://binarysearch.com/problems/Flip-to-Zeros

You are given an integer list nums containing 0s and 1s. Consider an operation 
where we pick an index i in nums and flip i as well as all numbers to the 
right of i. Return the minimum number of operations required to make nums 
contain all 0s.

Constraints

n ≤ 100,000 where n is the length of nums.
"""

class Solution:
    def solve(self, nums):
        count = 0 
        
        print('Start: ', nums)
        
        for idx, n in enumerate(nums):          
            #print(n)  
            if n == 1:
                print('n', n, 'idx', idx, 'length', len(nums[idx::]))  
                count += 1
                for i in range(len(nums[idx::])):
                    #print('Start', nums[i::])
                    if nums[i] == 1:
                        nums[i] = 0
                    elif nums[i] == 0:
                        nums[i] = 1
                    
                    print('Count: ', count, 'Mutation ', nums)

        return count                    
        
        
if __name__ == '__main__':
    '''
    print(Solution().solve([1, 1, 0]))          #2
    print(Solution().solve([0, 0, 0]))          #0
    print(Solution().solve([0, 1, 0, 0]))       #2
    print(Solution().solve([0]))                #0    
    print(Solution().solve([1]))                #1
    print('\n')
    '''
    print(Solution().solve([1, 0, 0, 0]))       #2
    print(Solution().solve([0, 1, 0]))          #2    


#%%

# Submitted, Time Limit Exceeded

class Solution:
    def solve(self, nums):
        count = 0 
        
        #print('Start: ', nums)
        
        for idx, n in enumerate(nums):          
            #print(n)  
            if n == 1:
                #print('n', n, 'idx', idx, 'length', len(nums[idx::]))  
                count += 1
                for i in range(nums[idx], len(nums)):
                    #print('Start', nums[i::])
                    if nums[i] == 1:
                        nums[i] = 0
                    elif nums[i] == 0:
                        nums[i] = 1
                    
                    #print('Count: ', count, 'Mutation ', nums)

        return count                    
        
        
if __name__ == '__main__':

    print(Solution().solve([1, 1, 0]))          #2
    print(Solution().solve([0, 0, 0]))          #0
    print(Solution().solve([0, 1, 0, 0]))       #2
    print(Solution().solve([0]))                #0    
    print(Solution().solve([1]))                #1
    print('\n')

    print(Solution().solve([1, 0, 0, 0]))       #2
    print(Solution().solve([0, 1, 0]))          #2    
 
# Time Limit Exceeded


#%%

# Submitted

class Solution:
    def solve(self, nums):
        count = 0 
        it, not_it = 1, 0
    
        for n in nums:          
            if n == it: 
                count += 1
                not_it, it = it, not_it

        return count                    
        
        
if __name__ == '__main__':
    print(Solution().solve([0, 1, 0, 0]))       #2
    print(Solution().solve([1, 0, 0, 0]))       #2
    print(Solution().solve([0, 1, 0]))          #2  
    print(Solution().solve([1, 1, 0]))          #2
    print(Solution().solve([1]))                #1
    print(Solution().solve([0, 0, 0]))          #0
    print(Solution().solve([0]))                #0    

# Your code took 23 milliseconds — faster than 94.83% in Python
