"""
664. Missing Numbers From 1 to N
Easy
https://binarysearch.com/problems/Missing-Numbers-From-1-to-N 

You are given a list of integers nums of length n where all numbers in the list
are from the interval [1, n][1,n] and some elements appear twice while others
only once. Return all the numbers from [1, n][1,n] that are not in the list,
sorted in ascending order.

Can you do it in \mathcal{O}(n)O(n) time, modify nums in-place and use \mathcal{O}(1)O(1) additional space?

Constraints

n ≤ 100,000 where n is the length of nums
"""


class Solution:
    def solve(self, nums):
        numbers = list(range(1, len(nums) + 1))

        for n in set(nums):
            del numbers[numbers.index(n)]

        return numbers


if __name__ == "__main__":
    print(Solution().solve(nums = [3, 3, 1, 1, 5, 5]))                          # [2, 4, 6]

# Time Limit Exceeded


#%%


class Solution:
    def solve(self, nums):
        numbers = list(range(1, len(nums) + 1))

        for n in set(nums):
            numbers.remove(n)

        return numbers


if __name__ == "__main__":
    print(Solution().solve(nums = [3, 3, 1, 1, 5, 5]))                          # [2, 4, 6]

# Time Limit Exceeded


#%%


class Solution:
    def solve(self, nums):
        return [n for n in range(1, len(nums) + 1) if n not in nums]


if __name__ == "__main__":
    print(Solution().solve(nums = [3, 3, 1, 1, 5, 5]))                          # [2, 4, 6]

# Time Limit Exceeded


#%%


class Solution:
    def solve(self, nums): 
        return [n for n in range(1, len(nums) + 1) if n not in set(nums)]


if __name__ == "__main__":
    print(Solution().solve(nums = [3, 3, 1, 1, 5, 5]))                          # [2, 4, 6]

# Time Limit Exceeded


#%%


class Solution:
    def solve(self, nums):
        nums_set = set(nums)
        return [n for n in range(1, len(nums) + 1) if n not in nums_set]


if __name__ == "__main__":
    print(Solution().solve(nums = [3, 3, 1, 1, 5, 5]))                          # [2, 4, 6]

# Success!
# Your code took 56 milliseconds — faster than 93.06% in Python


#%%


class Solution:
    def solve(self, nums):
        for n in nums:
            i = abs(n) - 1
            nums[i] = -abs(nums[i])

        return [i+1 for i, n in enumerate(nums) if n > 0]


if __name__ == "__main__":
    print(Solution().solve(nums = [3, 3, 1, 1, 5, 5]))                          # [2, 4, 6]

# Success!
# Your code took 133 milliseconds — faster than 42.10% in Python


#%% 

# Not mine.
# https://binarysearch.com/problems/Missing-Numbers-From-1-to-N/solutions/3013600


class Solution:
    def solve(self, nums):
        for i in range(len(a)):
            p = abs(a[i])
            if a[p - 1] > 0:
                a[p - 1] *= -1

        l = []

        for i in range(len(a)):
            if a[i] > 0:
                l += (i + 1,)
        return l


if __name__ == "__main__":
    print(Solution().solve(nums = [3, 3, 1, 1, 5, 5]))                          # [2, 4, 6]


#%%
