"""
0967. ASCII String to Integer
Easy
https://binarysearch.com/problems/ASCII-String-to-Integer 

You are given a string s containing digits from "0" to "9" and lowercase alphabet
characters. Return the sum of the numbers found in s.
"""


class Solution:
    def solve(self, s):
        return sum([int(n) for n in s if n in '0123456789'])


if __name__ == "__main__":
    print(Solution().solve(s = "11aa32bbb5"))           # 48
    print(Solution().solve(s = "abc"))                  # 0
    print(Solution().solve(s = "1a2b30"))               # 33

# ['1', '1', '3', '2', '5']     12
# 0
# ['1', '2', '3', '0']          6


#%%


import re

class Solution:
    def solve(self, s):
        nums = re.split('[a-zA-Z]', s) 
        return sum([int(n) for n in nums if n])


if __name__ == "__main__":
    print(Solution().solve(s = "11aa32bbb5"))           # 48
    print(Solution().solve(s = "abc"))                  # 0
    print(Solution().solve(s = "1a2b30"))               # 33

# Success!
# Your code took 57 milliseconds — faster than 44.79% in Python


#%%

# Time Complexity O(N) | Space Complexity O(1)


class Solution:
    def solve(self, s):
        result = 0
        n = 0

        for char in s:
            if char.isdigit():
                n = n * 10 + int(char)
            else:
                result += n
                n = 0

        return result + n


if __name__ == "__main__":
    print(Solution().solve(s = "11aa32bbb5"))           # 48
    print(Solution().solve(s = "abc"))                  # 0
    print(Solution().solve(s = "1a2b30"))               # 33

# Success!
# Your code took 41 milliseconds — faster than 69.13% in Python


#%%
