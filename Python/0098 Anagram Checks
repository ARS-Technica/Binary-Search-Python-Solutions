"""
Anagram Checks
https://binarysearch.com/problems/Anagram-Checks

Given two strings s0 and s1, return whether they are anagrams of each other.

Constraints

n ≤ 100,000 where n is the length of s0
m ≤ 100,000 where m is the length of s1
"""


class Solution:
    def solve(self, s0, s1):
        return sorted([char for char in s0]) == sorted([char for char in s1]) 


if __name__ == "__main__":
    print(Solution().solve("listen", "silent"))         # True
    print(Solution().solve("bedroom", "bathroom"))      # False

# Your code took 96 milliseconds — faster than 21.00% in Python


#%%


class Solution:
    def solve(self, s0, s1):
        return sorted(s0) == sorted(s1)


if __name__ == "__main__":
    print(Solution().solve("listen", "silent"))         # True
    print(Solution().solve("bedroom", "bathroom"))      # False

# Your code took 92 milliseconds — faster than 24.00% in Python


#%%


from collections import Counter

class Solution:
    def solve(self, s0, s1):
        return Counter(s0) == Counter(s1)


if __name__ == "__main__":
    print(Solution().solve("listen", "silent"))         # True
    print(Solution().solve("bedroom", "bathroom"))      # False

# Your code took 37 milliseconds — faster than 87.00% in Python


#%%


class Solution:
    def solve(self, s0, s1):
        dic = {}
        
        for char in s0:
            if char not in dic:
                dic[char] = 0
            dic[char] += 1
        
        for char in s1:
            if char not in dic:
                dic[char] = 0
            dic[char] -= 1
            
        for key in dic.keys():
            if dic[key] != 0:
                return False
            
        return True


if __name__ == "__main__":
    print(Solution().solve("listen", "silent"))         # True
    print(Solution().solve("bedroom", "bathroom"))      # False

# Your code took 71 milliseconds — faster than 69.00% in Python


#%%


from collections import defaultdict

class Solution:
    def solve(self, s0, s1):
        if len(s0) != len(s1):
            return False 

        count = defaultdict(int)

        for char in s0:
            count[char] += 1
        for char in s1:
            count[char] -= 1
            if count[char] < 0:
                return False

        return True


if __name__ == "__main__":
    print(Solution().solve("listen", "silent"))         # True
    print(Solution().solve("bedroom", "bathroom"))      # False

# Your code took 65 milliseconds — faster than 75.00% in Python


#%%
