"""
884. Index with Equal Left and Right Sums
Easy
https://binarysearch.com/problems/Index-with-Equal-Left-and-Right-Sums

Given a list of integer nums, return the earliest index i such that the sum of 
the numbers left of i is equal to the sum of numbers right of i. If there's no solution, return -1.

Sum of an empty list is defined to be 0.

Constraints

1 ≤ n ≤ 100,000 where n is the length of nums

Example 1
Input nums = [2, 3, 4, 0, 5, 2, 2]
Output 3
Explanation
Sum of the numbers left of index 3 is 9 and sum of the numbers right of index 3 also 9.

Example 2 
Input nums = [1, -2, 2]
Output 0
Explanation
Sum of the numbers left of index 0 is 0 and sum of the numbers right of index 0 also 0.
"""

class Solution:
    def solve(self, nums):
        pointer_value = 0
        sol = -1
        tally_left = [0,]
        #print('tally_left', tally_left, 'pointer_value', pointer_value, 'nums', nums)
        nums.append(0)
        for idx, num in enumerate(nums):
            #print('idx', idx, 'num', num)
            tally_left.append(pointer_value)
            pointer_value = nums.pop(0)
            #print('tally_left', tally_left, 'pointer_value', pointer_value, 'nums', nums)
            if sum(tally_left) == sum(nums):
                sol = idx
                break
        #print('tally_left', tally_left, 'pointer_value', pointer_value, 'nums', nums)                    
        return sol


if __name__ == '__main__':
    print(Solution().solve([2, 3, 4, 0, 5, 2, 2]))      #3    
    print(Solution().solve([1, -2, 2]))                 #0
    print(Solution().solve([0, 2]))                     #1
    print(Solution().solve([0, 0]))                     #0
    print(Solution().solve([-1, 1, 0]))                 #2

# Failed

#%%

# Time Limit Exceeded
 
class Solution:
    def solve(self, nums):
        sol = -1
        tally_left = 0
        tally_right = 0
                
        for idx, num in enumerate(nums):
            #print('idx', idx, 'left', sum(nums[0:idx]), 'right', sum(nums[idx:]))
            
            tally_left = sum(nums[0:idx])
            tally_right = sum(nums[idx+1::])   
            
            if tally_left == tally_right:  
                sol = idx
                break
            
        return sol
        

if __name__ == '__main__':
    print(Solution().solve([2, 3, 4, 0, 5, 2, 2]))      #3
    print(Solution().solve([1, -2, 2]))                 #0
    print(Solution().solve([0, 2]))                     #1
    print(Solution().solve([0, 0]))                     #0
    print(Solution().solve([-1, 1, 0]))                 #2
    
# Time Limit Exceeded

#%%
 
# Time Limit Exceeded

class Solution:
    def solve(self, nums):
        for idx, num in enumerate(nums):
            if sum(nums[0:idx]) == sum(nums[idx+1::]):
                return idx
                
        return -1
                 
        
if __name__ == '__main__':
    print(Solution().solve([2, -1, -1, 0]))             #3
    print(Solution().solve([2, 3, 4, 0, 5, 2, 2]))      #3
    print(Solution().solve([1, -2, 2]))                 #0
    print(Solution().solve([0, 2]))                     #1
    print(Solution().solve([0, 0]))                     #0
    print(Solution().solve([-1, 1, 0]))                 #2
    
    print(Solution().solve([-1, 1]))                    #-1

# Time Limit Exceeded
 
#%% 
 
class Solution:
    def solve(self, nums):
        total = sum(nums)
        left_sum = 0
        for idx, n in enumerate(nums):
            if (left_sum * 2) + n == total:
                return idx
            left_sum += n
        return -1


if __name__ == '__main__':
    print(Solution().solve([2, -1, -1, 0]))             #3
    print(Solution().solve([2, 3, 4, 0, 5, 2, 2]))      #3
    print(Solution().solve([1, -2, 2]))                 #0
    print(Solution().solve([0, 2]))                     #1
    print(Solution().solve([0, 0]))                     #0
    print(Solution().solve([-1, 1, 0]))                 #2    
    print(Solution().solve([-1, 1]))                    #-1

# Your code took 21 milliseconds — faster than 82.50% in Python





