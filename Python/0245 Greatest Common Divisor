"""
0245. Greatest Common Divisor
Easy
https://binarysearch.com/problems/Greatest-Common-Divisor

Given a list of positive integers nums, return the largest positive integer
that divides each of the integers.
"""


class Solution:
    def solve(self, nums):
        smallest = min(nums)

        if len(nums) == 1: return nums[0]

        for i in range(smallest + 1, 1, -1):
            if all(n % i == 0 for n in nums):
                return i

        return 1


if __name__ == "__main__":
    print( Solution().solve( nums = [6, 12, 9]) )                   # 3
    print( Solution().solve( nums = [6, 7, 9]) )                    # 1
    print( Solution().solve( nums = [747]) )                        # 747
    print( Solution().solve( nums = [700, 700, 700, 700]) )         # 700


#%%

# Better solution. Not mine.
# https://binarysearch.com/problems/Greatest-Common-Divisor/solutions/239472

# O(n) time | O(1) space

import math


class Solution:
    def solve(self, nums):
        return reduce(gcd, nums)


if __name__ == "__main__":
    print( Solution().solve( nums = [6, 12, 9]) )                   # 3
    print( Solution().solve( nums = [6, 7, 9]) )                    # 1
    print( Solution().solve( nums = [747]) )                        # 747
    print( Solution().solve( nums = [700, 700, 700, 700]) )         # 700

# Success!
# Your code took 14 milliseconds — faster than 67.43% in Python


#%%

# Euclid's algorithm


class Solution:
    def solve(self, nums):
        def gcd(x, y):
            if x > y:
                return gcd(y, x)
            if x == 0:
                return y

            return gcd(y % x, x)

        result = nums[0]

        for x in nums[1:]:
            result = gcd(result, x)

        return result


if __name__ == "__main__":
    print( Solution().solve( nums = [6, 12, 9]) )                   # 3
    print( Solution().solve( nums = [6, 7, 9]) )                    # 1
    print( Solution().solve( nums = [747]) )                        # 747
    print( Solution().solve( nums = [700, 700, 700, 700]) )         # 700

# Success!
# Your code took 45 milliseconds — faster than 20.45% in Python


#%%
