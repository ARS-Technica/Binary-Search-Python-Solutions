"""
0018. Run-Length Encoding
Easy
https://binarysearch.com/problems/Run-Length-Encoding 

Given a string s, return its run-length encoding. You can assume the string to
be encoded have no digits and consists solely of alphabetic characters.
"""


class Solution:
    def solve(self, s):
        count = 0
        result = ""
        temp = s[0]
        
        for char in s:
            if char == temp[-1]:
                count += 1
            else:
                result += str(count) + temp[-1]
                count = 1
                temp += char
        
        return result + str(count) + temp[-1]

        
if __name__ == '__main__':
    print(Solution().solve("aaaabbbccdaa"))         # "4a3b2c1d2a"
    print(Solution().solve("abcde"))                # "1a1b1c1d1e"
    print(Solution().solve("aabba"))                # "2a2b1a"
    print(Solution().solve("aaaaaaaaaa"))           # "10a"

# Success! Your code took 3 milliseconds — faster than 90.75% in Python


#%%

# Tryied to take up less space, ended up running slower.

class Solution:
    def solve(self, s):
        result = ""
        counter = 1

        for i in range(1, len(s)):
            if s[i - 1] == s[i]:
                counter += 1
            else:
                result = result + str(counter) + s[i - 1]
                counter = 1

        result = result + str(counter) + s[-1]
        return result


if __name__ == '__main__':
    print(Solution().solve("aaaabbbccdaa"))         # "4a3b2c1d2a"
    print(Solution().solve("abcde"))                # "1a1b1c1d1e"
    print(Solution().solve("aabba"))                # "2a2b1a"
    print(Solution().solve("aaaaaaaaaa"))           # "10a"

# Your code took 5 milliseconds — faster than 16.38% in Python


#%%

# Not mine.
# https://binarysearch.com/problems/Run-Length-Encoding/solutions/3387211

# Ironically, the most professional-looking solution ran the slowest.


from itertools import groupby


class Solution:
    def solve(self, s):
        return ''.join(str(len(list(n))) + i for i, n in groupby(s))


if __name__ == '__main__':
    print(Solution().solve("aaaabbbccdaa"))         # "4a3b2c1d2a"
    print(Solution().solve("abcde"))                # "1a1b1c1d1e"
    print(Solution().solve("aabba"))                # "2a2b1a"
    print(Solution().solve("aaaaaaaaaa"))           # "10a"

# Success! Your code took 4 milliseconds — faster than 42.76% in Python


#%%
