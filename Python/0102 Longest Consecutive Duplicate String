"""
102. Longest Consecutive Duplicate String
Easy
https://binarysearch.com/problems/Longest-Consecutive-Duplicate-String

Given a lowercase alphabet string s, return the length of the longest 
substring with same characters.
"""

class Solution:
    def solve(self, s):
        if len(s) == 0:
            return 0
        else:
            chars = [char for char in s]
            frequency = []
            letter = chars[0]
            letter_count = 0
            
            for i in chars:
                if i == letter:
                    letter_count += 1
                else:
                    frequency.append(letter_count)
                    letter = i
                    letter_count = 1
            
            frequency.append(letter_count)        
            return max(frequency)
            
        
if __name__ == '__main__':
    print(Solution().solve("abbbba"))       #4
    print(Solution().solve("aaabbb"))       #3


#%%

class Solution:
    def solve(self, s):
        if len(s) == 0:
            return 0

        letter_count = 1
        solution = 1
        
        for i in range(1, len(s)):
            if s[i] == s[i - 1]:
                letter_count += 1
            else:
                solution = max(solution, letter_count)
                letter_count = 1
         
        return max(letter_count, solution)
            
        
if __name__ == '__main__':
    print(Solution().solve("abbbba"))       #4
    print(Solution().solve("aaabbb"))       #3
    print(Solution().solve("aa"))           #2
    print(Solution().solve("a"))            #1


# Your code took 68 milliseconds — faster than 29.42% in Python

#%%
    
# Better solution, not mine

class Solution:
    def solve(self, s):
        if not s:
            return 0
        tot = 1
        size = 1
        for ix in range(1, len(s)):
            if s[ix] == s[ix - 1]:
                size += 1
            else:
                tot = max(tot, size)
                size = 1
        tot = max(tot, size)
        return tot

if __name__ == '__main__':
    print(Solution().solve("abbbba"))       #4
    print(Solution().solve("aaabbb"))       #3
    print(Solution().solve("aa"))           #2
    print(Solution().solve("a"))            #1


#%%

# Better solution, not mine

import itertools

class Solution:
    def solve(self, s):
        return max([len(list(group)) for _, group in itertools.groupby(s)] or [0])
            
        
if __name__ == '__main__':
    print(Solution().solve("abbbba"))       #4
    print(Solution().solve("aaabbb"))       #3

# Your code took 53 milliseconds — faster than 45.82% in Python
