"""
1. Sum of Two Numbers
Easy
https://binarysearch.com/problems/Sum-of-Two-Numbers 

Given a list of numbers nums and a number k, return whether any two elements 
from the list add up to k. You may not use the same element twice.

Note: Numbers can be negative or 0.

Constraints

n ≤ 100,000 where n is the length of nums
"""

from itertools import permutations


class Solution:
    def solve(self, nums, k):
        solutions = [pair for pair in permutations(nums, 2) if sum(pair) == k]
        return len(solutions) > 0

# Time Limit Exceeded


%##

from itertools import permutations


class Solution:
    def solve(self, nums, k):
        for pair in permutations(nums, 2):
            if sum(pair) == k:
                return True
        return False  

# Time Limit Exceeded


%##

from itertools import permutations


class Solution:
    def solve(self, nums, k):
        for idx, number in enumerate(nums):
            complimentary = k - number
            if complimentary in nums [idx+1::]:
                return True
        
        return False

# Time Limit Exceeded


%##

from itertools import groupby


class Solution: 
    def solve(self, nums, k):
        numsset = [k for k, g in groupby(nums)]
        for idx, number in enumerate(numsset):
            complimentary = k - number
            if complimentary in numsset[idx+1::]:
                return True
        
        return False

# Your code took 21 milliseconds — faster than 24.04% in Python

